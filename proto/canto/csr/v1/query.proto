syntax = "proto3";
package canto.csr.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canto/csr/v1/params.proto";
import "canto/csr/v1/csr.proto";


option go_package = "github.com/Canto-Network/Canto/v2/x/csr/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/v2/csr/params";
  }
  // query all registered CSRs
  rpc CSRs(QueryCSRsRequest) returns (QueryCSRsResponse) {
    option (google.api.http).get = "/canto/v2/csr/csrs"; 
  }
  // query a specific CSR by the nftId 
  rpc CSR(QueryCSRRequest) returns (QueryCSRResponse) {
    // query by address
    option (google.api.http).get = "/canto/v2/csr/csr/{nftId}";
  }
  // query a CSR by a specific deployer (cantoAddress)
  rpc DeployerCSR(QueryDeployerCSRRequest) returns (QueryDeployerCSRResponse) { 
    // query by deployer address 
    option (google.api.http).get = "/canto/v2/csr/csr_deployer/{deployer_address}";
  }
  // query a csr by the smart contract
  rpc ContractCSR(QueryContractCSRRequest) returns (QueryContractCSRResponse) {
    // query contract by contract address
    option (google.api.http).get = "/canto/v2/csr/contract_csr/{contract_address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false];
}

// Query for all registered CSRs, no argument required 
message QueryCSRsRequest {}

// Response contains PoolAddresses of all registered CSRs
message QueryCSRsResponse {
  repeated CSR csrs = 1 [ (gogoproto.nullable) = false ];
  // pagination for response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// request a specific CSR via the nftId which has been minted for the CSR
message QueryCSRRequest { 
  // query CSR via pool address, sdk.AccAddress of the pool in which funds will be accumulated
  uint64 nftId = 1; 
}

// response for query of CSR by pool addr
message QueryCSRResponse { 
  // csr object queried by pool address
  CSR csr = 1 [ (gogoproto.nullable) = false];
}

// query all CSRs deployed by an address
message QueryDeployerCSRRequest {
  //query by deployer_address for all
  string deployer_address = 1; 
}
// returns array of all CSRs registered by deployer 
message QueryDeployerCSRResponse { 
  repeated CSR csrs = 1 [ (gogoproto.nullable) = false ];
  // pagination for response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// request the CSR that the provided smart contract belongs to
message QueryContractCSRRequest {
  // query takes the contract address 
  string contract_address = 1;
}

// response of QueryContractCSRResponse
message QueryContractCSRResponse {
  // returns the CSR that contrains this contract
  CSR csr = 1 [ (gogoproto.nullable) = false ];
}