// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/csr/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Wrapper so that we can create an array of ints
type UIntArray struct {
	Value []uint64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (m *UIntArray) Reset()         { *m = UIntArray{} }
func (m *UIntArray) String() string { return proto.CompactTextString(m) }
func (*UIntArray) ProtoMessage()    {}
func (*UIntArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{0}
}
func (m *UIntArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UIntArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UIntArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UIntArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIntArray.Merge(m, src)
}
func (m *UIntArray) XXX_Size() int {
	return m.Size()
}
func (m *UIntArray) XXX_DiscardUnknown() {
	xxx_messageInfo_UIntArray.DiscardUnknown(m)
}

var xxx_messageInfo_UIntArray proto.InternalMessageInfo

func (m *UIntArray) GetValue() []uint64 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Wrapper around nonces and contracts objects
type ContractData struct {
	// contracts are the smart contract addresses that we want to register with this CSR pool
	Contracts []string `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	// nonces is used for address derivation and deployment verification.
	Nonces []*UIntArray `protobuf:"bytes,2,rep,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *ContractData) Reset()         { *m = ContractData{} }
func (m *ContractData) String() string { return proto.CompactTextString(m) }
func (*ContractData) ProtoMessage()    {}
func (*ContractData) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{1}
}
func (m *ContractData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractData.Merge(m, src)
}
func (m *ContractData) XXX_Size() int {
	return m.Size()
}
func (m *ContractData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractData.DiscardUnknown(m)
}

var xxx_messageInfo_ContractData proto.InternalMessageInfo

func (m *ContractData) GetContracts() []string {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *ContractData) GetNonces() []*UIntArray {
	if m != nil {
		return m.Nonces
	}
	return nil
}

// This message allows users to register a set of smart contracts into the CSR store.
// It will input the deployer address, number of NFTs to mint, NFT allocation per account
// if desired, set of smart contracts to start accepting transaction revenue, and nonces for address derivation.
type MsgRegisterCSR struct {
	// The deployer is the same account that signed the MsgRegisterCSR transaction
	Deployer string `protobuf:"bytes,1,opt,name=deployer,proto3" json:"deployer,omitempty"`
	// nft_supply tracks the number of NFTs the deployer wants to mint
	NftSupply uint64 `protobuf:"varint,2,opt,name=nft_supply,json=nftSupply,proto3" json:"nft_supply,omitempty"`
	// allocations keeps track of the allocations of NFTs that the deployer desires upon registration
	Allocations map[string]uint64 `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// contract Data is a wrapper around the contracts in this CSR and the nonces with which they were deployed
	ContractData *ContractData `protobuf:"bytes,4,opt,name=contract_data,json=contractData,proto3" json:"contract_data,omitempty"`
}

func (m *MsgRegisterCSR) Reset()         { *m = MsgRegisterCSR{} }
func (m *MsgRegisterCSR) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCSR) ProtoMessage()    {}
func (*MsgRegisterCSR) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{2}
}
func (m *MsgRegisterCSR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCSR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCSR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCSR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCSR.Merge(m, src)
}
func (m *MsgRegisterCSR) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCSR) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCSR.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCSR proto.InternalMessageInfo

func (m *MsgRegisterCSR) GetDeployer() string {
	if m != nil {
		return m.Deployer
	}
	return ""
}

func (m *MsgRegisterCSR) GetNftSupply() uint64 {
	if m != nil {
		return m.NftSupply
	}
	return 0
}

func (m *MsgRegisterCSR) GetAllocations() map[string]uint64 {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func (m *MsgRegisterCSR) GetContractData() *ContractData {
	if m != nil {
		return m.ContractData
	}
	return nil
}

// MsgRegisterCSRResponse returns no fields
type MsgRegisterCSRResponse struct {
}

func (m *MsgRegisterCSRResponse) Reset()         { *m = MsgRegisterCSRResponse{} }
func (m *MsgRegisterCSRResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCSRResponse) ProtoMessage()    {}
func (*MsgRegisterCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{3}
}
func (m *MsgRegisterCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCSRResponse.Merge(m, src)
}
func (m *MsgRegisterCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCSRResponse proto.InternalMessageInfo

// This message allows users to update an existing CSR pool with additional smart contracts.
// It will input the deployer address, the existing CSR pool address, a list of smart contracts
// to add, and nonces for derivation.
type MsgUpdateCSR struct {
	// The deployer is the same account that signed the MsgUpdateCSR transaction
	Deployer string `protobuf:"bytes,1,opt,name=deployer,proto3" json:"deployer,omitempty"`
	// pool_address corresponds to the Canto address of the CSR pool
	// that is accumulating rewards for a given set of NFTs
	PoolAddress string `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	// contract Data is a wrapper around the contracts in this CSR and the nonces with which they were deployed
	ContractData *ContractData `protobuf:"bytes,3,opt,name=contract_data,json=contractData,proto3" json:"contract_data,omitempty"`
}

func (m *MsgUpdateCSR) Reset()         { *m = MsgUpdateCSR{} }
func (m *MsgUpdateCSR) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCSR) ProtoMessage()    {}
func (*MsgUpdateCSR) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{4}
}
func (m *MsgUpdateCSR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCSR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCSR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCSR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCSR.Merge(m, src)
}
func (m *MsgUpdateCSR) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCSR) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCSR.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCSR proto.InternalMessageInfo

func (m *MsgUpdateCSR) GetDeployer() string {
	if m != nil {
		return m.Deployer
	}
	return ""
}

func (m *MsgUpdateCSR) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *MsgUpdateCSR) GetContractData() *ContractData {
	if m != nil {
		return m.ContractData
	}
	return nil
}

// MsgUpdateCSRResponse returns no fields
type MsgUpdateCSRResponse struct {
}

func (m *MsgUpdateCSRResponse) Reset()         { *m = MsgUpdateCSRResponse{} }
func (m *MsgUpdateCSRResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCSRResponse) ProtoMessage()    {}
func (*MsgUpdateCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{5}
}
func (m *MsgUpdateCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCSRResponse.Merge(m, src)
}
func (m *MsgUpdateCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCSRResponse proto.InternalMessageInfo

// Whenever a user, owning a set number of NFTs for a set of CSRs, would like to
// withdraw the rewards associated with each of their NFTs, they submit a MsgWithdrawCSR.
// The user submits the message with a set of CSRs that they would like to withdraw from,
// and the set of NFTs within each CSR that they will be withdrawing from.
type MsgWithdrawCSR struct {
	// The addresses of the csr_pools that the rewards will be withdrawn from
	CsrPools []string `protobuf:"bytes,1,rep,name=csr_pools,json=csrPools,proto3" json:"csr_pools,omitempty"`
	// The identifiers of each NFT for each CSRPool
	Nfts []*UIntArray `protobuf:"bytes,2,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (m *MsgWithdrawCSR) Reset()         { *m = MsgWithdrawCSR{} }
func (m *MsgWithdrawCSR) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCSR) ProtoMessage()    {}
func (*MsgWithdrawCSR) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{6}
}
func (m *MsgWithdrawCSR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCSR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCSR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCSR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCSR.Merge(m, src)
}
func (m *MsgWithdrawCSR) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCSR) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCSR.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCSR proto.InternalMessageInfo

func (m *MsgWithdrawCSR) GetCsrPools() []string {
	if m != nil {
		return m.CsrPools
	}
	return nil
}

func (m *MsgWithdrawCSR) GetNfts() []*UIntArray {
	if m != nil {
		return m.Nfts
	}
	return nil
}

// MsgWithdrawCSRResponse returns no fields
type MsgWithdrawCSRResponse struct {
}

func (m *MsgWithdrawCSRResponse) Reset()         { *m = MsgWithdrawCSRResponse{} }
func (m *MsgWithdrawCSRResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCSRResponse) ProtoMessage()    {}
func (*MsgWithdrawCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_249005a6451fe2d1, []int{7}
}
func (m *MsgWithdrawCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCSRResponse.Merge(m, src)
}
func (m *MsgWithdrawCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCSRResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UIntArray)(nil), "canto.csr.v1.UIntArray")
	proto.RegisterType((*ContractData)(nil), "canto.csr.v1.ContractData")
	proto.RegisterType((*MsgRegisterCSR)(nil), "canto.csr.v1.MsgRegisterCSR")
	proto.RegisterMapType((map[string]uint64)(nil), "canto.csr.v1.MsgRegisterCSR.AllocationsEntry")
	proto.RegisterType((*MsgRegisterCSRResponse)(nil), "canto.csr.v1.MsgRegisterCSRResponse")
	proto.RegisterType((*MsgUpdateCSR)(nil), "canto.csr.v1.MsgUpdateCSR")
	proto.RegisterType((*MsgUpdateCSRResponse)(nil), "canto.csr.v1.MsgUpdateCSRResponse")
	proto.RegisterType((*MsgWithdrawCSR)(nil), "canto.csr.v1.MsgWithdrawCSR")
	proto.RegisterType((*MsgWithdrawCSRResponse)(nil), "canto.csr.v1.MsgWithdrawCSRResponse")
}

func init() { proto.RegisterFile("canto/csr/v1/tx.proto", fileDescriptor_249005a6451fe2d1) }

var fileDescriptor_249005a6451fe2d1 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0x6e, 0x76, 0xd7, 0xd2, 0xbc, 0x5d, 0xa5, 0x0c, 0xb5, 0xc6, 0xb8, 0x2e, 0xdb, 0xe0, 0x61,
	0x41, 0x9a, 0xd0, 0xf5, 0x22, 0x1e, 0x94, 0x5a, 0x45, 0x3c, 0x54, 0x25, 0xa5, 0x08, 0x05, 0x09,
	0xd3, 0xc9, 0x34, 0x5d, 0x9a, 0xce, 0x84, 0x99, 0xc9, 0xb6, 0xb9, 0xfa, 0x07, 0x88, 0xe0, 0xd9,
	0xff, 0xc7, 0x63, 0xc1, 0x8b, 0x47, 0xd9, 0xfa, 0x87, 0x48, 0x26, 0x69, 0x9a, 0xd8, 0x5f, 0x78,
	0x9b, 0xef, 0xbd, 0x6f, 0xdf, 0xf7, 0xbe, 0x6f, 0x66, 0x03, 0x77, 0x09, 0x66, 0x8a, 0x7b, 0x44,
	0x0a, 0x6f, 0xba, 0xe6, 0xa9, 0x63, 0x37, 0x11, 0x5c, 0x71, 0xd4, 0xd3, 0x65, 0x97, 0x48, 0xe1,
	0x4e, 0xd7, 0xec, 0x7e, 0xc4, 0x79, 0x14, 0x53, 0x0f, 0x27, 0x13, 0x0f, 0x33, 0xc6, 0x15, 0x56,
	0x13, 0xce, 0x64, 0xc1, 0xb5, 0x97, 0x22, 0x1e, 0x71, 0x7d, 0xf4, 0xf2, 0x53, 0x59, 0xbd, 0x4f,
	0xb8, 0x3c, 0xe4, 0x32, 0x28, 0x1a, 0x05, 0x28, 0x5a, 0xce, 0x0a, 0x98, 0xdb, 0x6f, 0x99, 0x5a,
	0x17, 0x02, 0x67, 0x68, 0x09, 0x6e, 0x4d, 0x71, 0x9c, 0x52, 0xcb, 0x18, 0xb6, 0x47, 0x1d, 0xbf,
	0x00, 0xce, 0x27, 0xe8, 0x6d, 0x70, 0xa6, 0x04, 0x26, 0xea, 0x15, 0x56, 0x18, 0xf5, 0xc1, 0x24,
	0x25, 0x96, 0x9a, 0x69, 0xfa, 0xe7, 0x05, 0xe4, 0xc1, 0x3c, 0xe3, 0x8c, 0x50, 0x69, 0xb5, 0x86,
	0xed, 0x51, 0x77, 0x7c, 0xcf, 0xad, 0xaf, 0xef, 0x56, 0x62, 0x7e, 0x49, 0x73, 0xbe, 0xb7, 0xe0,
	0xce, 0xa6, 0x8c, 0x7c, 0x1a, 0x4d, 0xa4, 0xa2, 0x62, 0x63, 0xcb, 0x47, 0x36, 0x2c, 0x84, 0x34,
	0x89, 0x79, 0x46, 0x85, 0x65, 0x0c, 0x8d, 0x91, 0xe9, 0x57, 0x18, 0x3d, 0x04, 0x60, 0x7b, 0x2a,
	0x90, 0x69, 0x92, 0xc4, 0x99, 0xd5, 0x1a, 0x1a, 0xa3, 0x8e, 0x6f, 0xb2, 0x3d, 0xb5, 0xa5, 0x0b,
	0xe8, 0x3d, 0x74, 0x71, 0x1c, 0x73, 0x52, 0xa4, 0x62, 0xb5, 0xf5, 0x0e, 0xab, 0xcd, 0x1d, 0x9a,
	0x6a, 0xee, 0xfa, 0x39, 0xff, 0x35, 0x53, 0x22, 0xf3, 0xeb, 0x13, 0xd0, 0x0b, 0xb8, 0x7d, 0x66,
	0x2e, 0x08, 0xb1, 0xc2, 0x56, 0x67, 0x68, 0x8c, 0xba, 0x63, 0xbb, 0x39, 0xb2, 0x1e, 0x90, 0xdf,
	0x23, 0x35, 0x64, 0x3f, 0x87, 0xc5, 0x7f, 0x15, 0xd0, 0x22, 0xb4, 0x0f, 0x68, 0x56, 0x7a, 0xcb,
	0x8f, 0xe7, 0xd1, 0x17, 0x8e, 0x0a, 0xf0, 0xac, 0xf5, 0xd4, 0x70, 0x2c, 0x58, 0x6e, 0x2e, 0xec,
	0x53, 0x99, 0x70, 0x26, 0xa9, 0xf3, 0xc5, 0x80, 0xde, 0xa6, 0x8c, 0xb6, 0x93, 0x10, 0x2b, 0x7a,
	0x53, 0x6e, 0x2b, 0xd0, 0x4b, 0x38, 0x8f, 0x03, 0x1c, 0x86, 0x82, 0x4a, 0xa9, 0x75, 0x4c, 0xbf,
	0x9b, 0xd7, 0xd6, 0x8b, 0xd2, 0x45, 0xab, 0xed, 0xff, 0xb3, 0xea, 0x2c, 0xc3, 0x52, 0x7d, 0x9f,
	0x6a, 0xd1, 0x1d, 0x7d, 0xc3, 0x1f, 0x27, 0x6a, 0x3f, 0x14, 0xf8, 0x28, 0xdf, 0xf4, 0x01, 0x98,
	0x44, 0x8a, 0x20, 0x57, 0x3f, 0x7b, 0x43, 0x0b, 0x44, 0x8a, 0x0f, 0x39, 0x46, 0x8f, 0xa1, 0xc3,
	0xf6, 0xd4, 0x8d, 0x0f, 0x48, 0x93, 0xca, 0x78, 0x6a, 0xb3, 0xcf, 0x54, 0xc7, 0xb3, 0x16, 0xb4,
	0x37, 0x65, 0x84, 0x52, 0xe8, 0xd6, 0x1f, 0x57, 0xff, 0xba, 0xc7, 0x60, 0x3f, 0xba, 0xae, 0x5b,
	0x19, 0x72, 0x3e, 0xff, 0xfc, 0xf3, 0xad, 0xd5, 0x47, 0xb6, 0xd7, 0xf8, 0xcb, 0x8a, 0x92, 0x1a,
	0x10, 0x29, 0xd0, 0x21, 0x98, 0xb5, 0x9b, 0xb9, 0x30, 0xb6, 0xea, 0xd9, 0xce, 0xd5, 0xbd, 0x4a,
	0x70, 0xa8, 0x05, 0x6d, 0x64, 0x35, 0x05, 0x53, 0x4d, 0xd4, 0x72, 0x29, 0x74, 0xeb, 0x01, 0x5f,
	0x74, 0x59, 0xeb, 0x5e, 0xe2, 0xf2, 0x92, 0x00, 0xaf, 0x72, 0x79, 0x54, 0x52, 0x73, 0xd9, 0x97,
	0x6f, 0x7e, 0xcc, 0x06, 0xc6, 0xc9, 0x6c, 0x60, 0xfc, 0x9e, 0x0d, 0x8c, 0xaf, 0xa7, 0x83, 0xb9,
	0x93, 0xd3, 0xc1, 0xdc, 0xaf, 0xd3, 0xc1, 0xdc, 0xce, 0x6a, 0x34, 0x51, 0xfb, 0xe9, 0xae, 0x4b,
	0xf8, 0xa1, 0xb7, 0x91, 0xff, 0x7e, 0xf5, 0x1d, 0x55, 0x47, 0x5c, 0x1c, 0x14, 0xc8, 0x9b, 0x8e,
	0xbd, 0x63, 0x3d, 0x52, 0x65, 0x09, 0x95, 0xbb, 0xf3, 0xfa, 0x7b, 0xf4, 0xe4, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x70, 0xdc, 0x8c, 0x05, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// register a new CSR with a set of smart contracts
	RegisterCSR(ctx context.Context, in *MsgRegisterCSR, opts ...grpc.CallOption) (*MsgRegisterCSRResponse, error)
	// update an existing CSR with a new set of smart contracts
	UpdateCSR(ctx context.Context, in *MsgUpdateCSR, opts ...grpc.CallOption) (*MsgUpdateCSRResponse, error)
	// withdraw rewards for CSRs
	WithdrawCSR(ctx context.Context, in *MsgWithdrawCSR, opts ...grpc.CallOption) (*MsgWithdrawCSRResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterCSR(ctx context.Context, in *MsgRegisterCSR, opts ...grpc.CallOption) (*MsgRegisterCSRResponse, error) {
	out := new(MsgRegisterCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Msg/RegisterCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCSR(ctx context.Context, in *MsgUpdateCSR, opts ...grpc.CallOption) (*MsgUpdateCSRResponse, error) {
	out := new(MsgUpdateCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Msg/UpdateCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawCSR(ctx context.Context, in *MsgWithdrawCSR, opts ...grpc.CallOption) (*MsgWithdrawCSRResponse, error) {
	out := new(MsgWithdrawCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Msg/WithdrawCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// register a new CSR with a set of smart contracts
	RegisterCSR(context.Context, *MsgRegisterCSR) (*MsgRegisterCSRResponse, error)
	// update an existing CSR with a new set of smart contracts
	UpdateCSR(context.Context, *MsgUpdateCSR) (*MsgUpdateCSRResponse, error)
	// withdraw rewards for CSRs
	WithdrawCSR(context.Context, *MsgWithdrawCSR) (*MsgWithdrawCSRResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterCSR(ctx context.Context, req *MsgRegisterCSR) (*MsgRegisterCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCSR not implemented")
}
func (*UnimplementedMsgServer) UpdateCSR(ctx context.Context, req *MsgUpdateCSR) (*MsgUpdateCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCSR not implemented")
}
func (*UnimplementedMsgServer) WithdrawCSR(ctx context.Context, req *MsgWithdrawCSR) (*MsgWithdrawCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCSR not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCSR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Msg/RegisterCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCSR(ctx, req.(*MsgRegisterCSR))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCSR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Msg/UpdateCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCSR(ctx, req.(*MsgUpdateCSR))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawCSR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Msg/WithdrawCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawCSR(ctx, req.(*MsgWithdrawCSR))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.csr.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCSR",
			Handler:    _Msg_RegisterCSR_Handler,
		},
		{
			MethodName: "UpdateCSR",
			Handler:    _Msg_UpdateCSR_Handler,
		},
		{
			MethodName: "WithdrawCSR",
			Handler:    _Msg_WithdrawCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/csr/v1/tx.proto",
}

func (m *UIntArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UIntArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UIntArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA2 := make([]byte, len(m.Value)*10)
		var j1 int
		for _, num := range m.Value {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for iNdEx := len(m.Nonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contracts[iNdEx])
			copy(dAtA[i:], m.Contracts[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Contracts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCSR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCSR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCSR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractData != nil {
		{
			size, err := m.ContractData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Allocations) > 0 {
		for k := range m.Allocations {
			v := m.Allocations[k]
			baseI := i
			i = encodeVarintTx(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NftSupply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NftSupply))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Deployer) > 0 {
		i -= len(m.Deployer)
		copy(dAtA[i:], m.Deployer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Deployer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCSR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCSR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCSR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractData != nil {
		{
			size, err := m.ContractData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deployer) > 0 {
		i -= len(m.Deployer)
		copy(dAtA[i:], m.Deployer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Deployer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCSR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCSR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCSR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nfts) > 0 {
		for iNdEx := len(m.Nfts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nfts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CsrPools) > 0 {
		for iNdEx := len(m.CsrPools) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CsrPools[iNdEx])
			copy(dAtA[i:], m.CsrPools[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CsrPools[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UIntArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *ContractData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, s := range m.Contracts {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Nonces) > 0 {
		for _, e := range m.Nonces {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterCSR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NftSupply != 0 {
		n += 1 + sovTx(uint64(m.NftSupply))
	}
	if len(m.Allocations) > 0 {
		for k, v := range m.Allocations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + sovTx(uint64(v))
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	if m.ContractData != nil {
		l = m.ContractData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCSR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractData != nil {
		l = m.ContractData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawCSR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CsrPools) > 0 {
		for _, s := range m.CsrPools {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Nfts) > 0 {
		for _, e := range m.Nfts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UIntArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UIntArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UIntArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonces = append(m.Nonces, &UIntArray{})
			if err := m.Nonces[len(m.Nonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCSR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCSR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCSR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSupply", wireType)
			}
			m.NftSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocations == nil {
				m.Allocations = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Allocations[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractData == nil {
				m.ContractData = &ContractData{}
			}
			if err := m.ContractData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCSR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCSR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCSR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractData == nil {
				m.ContractData = &ContractData{}
			}
			if err := m.ContractData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCSR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCSR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCSR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrPools", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CsrPools = append(m.CsrPools, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nfts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nfts = append(m.Nfts, &UIntArray{})
			if err := m.Nfts[len(m.Nfts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
