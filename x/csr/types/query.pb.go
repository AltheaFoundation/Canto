// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/csr/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Query for all registered CSRs, no argument required
type QueryCSRsRequest struct {
}

func (m *QueryCSRsRequest) Reset()         { *m = QueryCSRsRequest{} }
func (m *QueryCSRsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCSRsRequest) ProtoMessage()    {}
func (*QueryCSRsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{2}
}
func (m *QueryCSRsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRsRequest.Merge(m, src)
}
func (m *QueryCSRsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRsRequest proto.InternalMessageInfo

// Response contains PoolAddresses of all registered CSRs
type QueryCSRsResponse struct {
	Csrs []CSR `protobuf:"bytes,1,rep,name=csrs,proto3" json:"csrs"`
	// pagination for response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCSRsResponse) Reset()         { *m = QueryCSRsResponse{} }
func (m *QueryCSRsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCSRsResponse) ProtoMessage()    {}
func (*QueryCSRsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{3}
}
func (m *QueryCSRsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRsResponse.Merge(m, src)
}
func (m *QueryCSRsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRsResponse proto.InternalMessageInfo

func (m *QueryCSRsResponse) GetCsrs() []CSR {
	if m != nil {
		return m.Csrs
	}
	return nil
}

func (m *QueryCSRsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request a specific CSR via the nftId which has been minted for the CSR
type QueryCSRRequest struct {
	// query CSR via pool address, sdk.AccAddress of the pool in which funds will be accumulated
	NftId uint64 `protobuf:"varint,1,opt,name=nftId,proto3" json:"nftId,omitempty"`
}

func (m *QueryCSRRequest) Reset()         { *m = QueryCSRRequest{} }
func (m *QueryCSRRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCSRRequest) ProtoMessage()    {}
func (*QueryCSRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{4}
}
func (m *QueryCSRRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRRequest.Merge(m, src)
}
func (m *QueryCSRRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRRequest proto.InternalMessageInfo

func (m *QueryCSRRequest) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

// response for query of CSR by pool addr
type QueryCSRResponse struct {
	// csr object queried by pool address
	Csr CSR `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr"`
}

func (m *QueryCSRResponse) Reset()         { *m = QueryCSRResponse{} }
func (m *QueryCSRResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCSRResponse) ProtoMessage()    {}
func (*QueryCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{5}
}
func (m *QueryCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRResponse.Merge(m, src)
}
func (m *QueryCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRResponse proto.InternalMessageInfo

func (m *QueryCSRResponse) GetCsr() CSR {
	if m != nil {
		return m.Csr
	}
	return CSR{}
}

// query all CSRs deployed by an address
type QueryDeployerCSRRequest struct {
	//query by deployer_address for all
	DeployerAddress string `protobuf:"bytes,1,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
}

func (m *QueryDeployerCSRRequest) Reset()         { *m = QueryDeployerCSRRequest{} }
func (m *QueryDeployerCSRRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeployerCSRRequest) ProtoMessage()    {}
func (*QueryDeployerCSRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{6}
}
func (m *QueryDeployerCSRRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeployerCSRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeployerCSRRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeployerCSRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeployerCSRRequest.Merge(m, src)
}
func (m *QueryDeployerCSRRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeployerCSRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeployerCSRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeployerCSRRequest proto.InternalMessageInfo

func (m *QueryDeployerCSRRequest) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

// returns array of all CSRs registered by deployer
type QueryDeployerCSRResponse struct {
	Csrs []CSR `protobuf:"bytes,1,rep,name=csrs,proto3" json:"csrs"`
	// pagination for response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeployerCSRResponse) Reset()         { *m = QueryDeployerCSRResponse{} }
func (m *QueryDeployerCSRResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeployerCSRResponse) ProtoMessage()    {}
func (*QueryDeployerCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{7}
}
func (m *QueryDeployerCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeployerCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeployerCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeployerCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeployerCSRResponse.Merge(m, src)
}
func (m *QueryDeployerCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeployerCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeployerCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeployerCSRResponse proto.InternalMessageInfo

func (m *QueryDeployerCSRResponse) GetCsrs() []CSR {
	if m != nil {
		return m.Csrs
	}
	return nil
}

func (m *QueryDeployerCSRResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request the CSR that the provided smart contract belongs to
type QueryContractCSRRequest struct {
	// query takes the contract address
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryContractCSRRequest) Reset()         { *m = QueryContractCSRRequest{} }
func (m *QueryContractCSRRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractCSRRequest) ProtoMessage()    {}
func (*QueryContractCSRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{8}
}
func (m *QueryContractCSRRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCSRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCSRRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCSRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCSRRequest.Merge(m, src)
}
func (m *QueryContractCSRRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCSRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCSRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCSRRequest proto.InternalMessageInfo

func (m *QueryContractCSRRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// response of QueryContractCSRResponse
type QueryContractCSRResponse struct {
	// returns the CSR that contrains this contract
	Csr CSR `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr"`
}

func (m *QueryContractCSRResponse) Reset()         { *m = QueryContractCSRResponse{} }
func (m *QueryContractCSRResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractCSRResponse) ProtoMessage()    {}
func (*QueryContractCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{9}
}
func (m *QueryContractCSRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCSRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCSRResponse.Merge(m, src)
}
func (m *QueryContractCSRResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCSRResponse proto.InternalMessageInfo

func (m *QueryContractCSRResponse) GetCsr() CSR {
	if m != nil {
		return m.Csr
	}
	return CSR{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.csr.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.csr.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCSRsRequest)(nil), "canto.csr.v1.QueryCSRsRequest")
	proto.RegisterType((*QueryCSRsResponse)(nil), "canto.csr.v1.QueryCSRsResponse")
	proto.RegisterType((*QueryCSRRequest)(nil), "canto.csr.v1.QueryCSRRequest")
	proto.RegisterType((*QueryCSRResponse)(nil), "canto.csr.v1.QueryCSRResponse")
	proto.RegisterType((*QueryDeployerCSRRequest)(nil), "canto.csr.v1.QueryDeployerCSRRequest")
	proto.RegisterType((*QueryDeployerCSRResponse)(nil), "canto.csr.v1.QueryDeployerCSRResponse")
	proto.RegisterType((*QueryContractCSRRequest)(nil), "canto.csr.v1.QueryContractCSRRequest")
	proto.RegisterType((*QueryContractCSRResponse)(nil), "canto.csr.v1.QueryContractCSRResponse")
}

func init() { proto.RegisterFile("canto/csr/v1/query.proto", fileDescriptor_a845ddc1dc245388) }

var fileDescriptor_a845ddc1dc245388 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x6d, 0xd6, 0xae, 0xd2, 0xcf, 0xfd, 0x49, 0xdb, 0x4c, 0x34, 0xba, 0x30, 0xb2, 0x2d, 0x12,
	0x6c, 0x03, 0x35, 0x56, 0x8b, 0x38, 0x72, 0x60, 0x1d, 0x9a, 0x76, 0x41, 0x23, 0xbd, 0x71, 0x99,
	0xdc, 0xd4, 0x84, 0x6a, 0x6b, 0x9c, 0xd9, 0x6e, 0xa1, 0x9a, 0x76, 0xe1, 0xc6, 0x6d, 0xd2, 0xfe,
	0xa9, 0x1d, 0x27, 0x71, 0xe1, 0x84, 0x50, 0xcb, 0x99, 0xbf, 0x01, 0xc5, 0x76, 0xb6, 0xa4, 0x49,
	0x41, 0x9c, 0xb8, 0x35, 0xdf, 0xf7, 0xfc, 0xde, 0xfb, 0x3e, 0x3f, 0x17, 0xd4, 0x7d, 0x1c, 0x0a,
	0x8a, 0x7c, 0xce, 0xd0, 0xa8, 0x89, 0xce, 0x86, 0x84, 0x8d, 0xdd, 0x88, 0x51, 0x41, 0xe1, 0xff,
	0xb2, 0xe3, 0xfa, 0x9c, 0xb9, 0xa3, 0xa6, 0x65, 0x06, 0x34, 0xa0, 0xb2, 0x81, 0xe2, 0x5f, 0x0a,
	0x63, 0xad, 0x07, 0x94, 0x06, 0xa7, 0x04, 0xe1, 0xa8, 0x8f, 0x70, 0x18, 0x52, 0x81, 0x45, 0x9f,
	0x86, 0x5c, 0x77, 0x9f, 0xf8, 0x94, 0x0f, 0x28, 0x47, 0x5d, 0xcc, 0x89, 0xa2, 0x46, 0xa3, 0x66,
	0x97, 0x08, 0xdc, 0x44, 0x11, 0x0e, 0xfa, 0xa1, 0x04, 0x6b, 0xec, 0x5a, 0xc6, 0x47, 0x84, 0x19,
	0x1e, 0x24, 0x34, 0xab, 0x99, 0x56, 0xec, 0x47, 0xd6, 0x1d, 0x13, 0xc0, 0x37, 0x31, 0xe9, 0x91,
	0x04, 0x7b, 0xe4, 0x6c, 0x48, 0xb8, 0x70, 0x0e, 0xc1, 0xbd, 0x4c, 0x95, 0x47, 0x34, 0xe4, 0x04,
	0xb6, 0x40, 0x55, 0x91, 0xd6, 0x8d, 0x4d, 0x63, 0xa7, 0xd6, 0x32, 0xdd, 0xf4, 0x78, 0xae, 0x42,
	0xef, 0x55, 0xae, 0xbf, 0x6d, 0x94, 0x3c, 0x8d, 0x74, 0x20, 0x58, 0x96, 0x54, 0xed, 0x8e, 0x77,
	0x4b, 0xff, 0xd9, 0x00, 0x2b, 0xa9, 0xa2, 0x66, 0x7f, 0x0a, 0x2a, 0x3e, 0x67, 0x31, 0x77, 0x79,
	0xa7, 0xd6, 0x5a, 0xc9, 0x72, 0xb7, 0x3b, 0x9e, 0x26, 0x96, 0x20, 0x78, 0x00, 0xc0, 0xdd, 0xf8,
	0xf5, 0x05, 0x69, 0x67, 0xdb, 0x55, 0xbb, 0x72, 0xe3, 0x5d, 0xb9, 0xea, 0x1a, 0xf4, 0xae, 0xdc,
	0x23, 0x1c, 0x90, 0x44, 0xc9, 0x4b, 0x1d, 0x75, 0xb6, 0xc1, 0x52, 0x62, 0x45, 0xdb, 0x83, 0x26,
	0x58, 0x0c, 0xdf, 0x89, 0xc3, 0x9e, 0x9c, 0xb2, 0xe2, 0xa9, 0x0f, 0xe7, 0xc5, 0xdd, 0x20, 0xb7,
	0x96, 0x77, 0x41, 0xd9, 0xe7, 0x4c, 0x6f, 0x63, 0xae, 0xe3, 0x18, 0xe3, 0xec, 0x83, 0xfb, 0xf2,
	0xf8, 0x3e, 0x89, 0x4e, 0xe9, 0x98, 0xb0, 0x94, 0xde, 0x2e, 0x58, 0xee, 0xe9, 0xea, 0x31, 0xee,
	0xf5, 0x18, 0xe1, 0x6a, 0xc1, 0xff, 0x79, 0x4b, 0x49, 0xfd, 0xa5, 0x2a, 0x3b, 0x97, 0x06, 0xa8,
	0xe7, 0x69, 0xfe, 0xe9, 0x02, 0x93, 0xc1, 0xda, 0x34, 0x14, 0x0c, 0xfb, 0x22, 0x3b, 0x98, 0xaf,
	0xab, 0xb3, 0x83, 0x25, 0xf5, 0x64, 0xb0, 0x57, 0x7a, 0xae, 0x0c, 0xcb, 0x5f, 0x6f, 0xb9, 0xf5,
	0xb3, 0x02, 0x16, 0x25, 0x0f, 0x3c, 0x01, 0x55, 0x95, 0x47, 0xb8, 0x99, 0x3d, 0x91, 0x8f, 0xbb,
	0xb5, 0xf5, 0x1b, 0x84, 0xf2, 0xe0, 0xac, 0x7f, 0xfa, 0xf2, 0xe3, 0x6a, 0x61, 0x15, 0x9a, 0x48,
	0x3d, 0xa4, 0x51, 0x4b, 0xbe, 0x25, 0x15, 0x72, 0xe8, 0x83, 0x4a, 0x1c, 0x65, 0x68, 0x17, 0x10,
	0xa5, 0x82, 0x6f, 0x6d, 0xcc, 0xed, 0x6b, 0x19, 0x4b, 0xca, 0x98, 0x10, 0x66, 0x65, 0xe4, 0x8d,
	0x05, 0xa0, 0xdc, 0xee, 0x78, 0xf0, 0x61, 0x31, 0x47, 0x22, 0x61, 0xcf, 0x6b, 0x6b, 0x85, 0x2d,
	0xa9, 0xf0, 0x00, 0xae, 0xe5, 0x14, 0xd0, 0xb9, 0x0c, 0xfa, 0x05, 0xbc, 0x32, 0x40, 0x2d, 0x95,
	0x2f, 0xf8, 0xa8, 0x80, 0x32, 0x1f, 0x63, 0xeb, 0xf1, 0x9f, 0x60, 0xda, 0xc1, 0x73, 0xe9, 0x00,
	0xc1, 0x46, 0xce, 0xc1, 0x71, 0x12, 0x77, 0x74, 0x3e, 0xfb, 0x20, 0x94, 0xab, 0x54, 0x3a, 0x0a,
	0x5d, 0xe5, 0x33, 0x58, 0xe8, 0xaa, 0x20, 0x64, 0x73, 0x5d, 0x25, 0xf9, 0x95, 0x0b, 0x9a, 0x4d,
	0xf3, 0xc5, 0xde, 0xc1, 0xf5, 0xc4, 0x36, 0x6e, 0x26, 0xb6, 0xf1, 0x7d, 0x62, 0x1b, 0x97, 0x53,
	0xbb, 0x74, 0x33, 0xb5, 0x4b, 0x5f, 0xa7, 0x76, 0xe9, 0x6d, 0x23, 0xe8, 0x8b, 0xf7, 0xc3, 0xae,
	0xeb, 0xd3, 0x01, 0x6a, 0xc7, 0x94, 0x8d, 0xd7, 0x44, 0x7c, 0xa0, 0xec, 0x44, 0x7d, 0xc5, 0x02,
	0x1f, 0xa5, 0x84, 0x18, 0x47, 0x84, 0x77, 0xab, 0xf2, 0xff, 0xf8, 0xd9, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x14, 0x1b, 0x2c, 0x55, 0x4c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// query all registered CSRs
	CSRs(ctx context.Context, in *QueryCSRsRequest, opts ...grpc.CallOption) (*QueryCSRsResponse, error)
	// query a specific CSR by the nftId
	CSR(ctx context.Context, in *QueryCSRRequest, opts ...grpc.CallOption) (*QueryCSRResponse, error)
	// query a CSR by a specific deployer
	DeployerCSR(ctx context.Context, in *QueryDeployerCSRRequest, opts ...grpc.CallOption) (*QueryDeployerCSRResponse, error)
	// query a csr by the smart contract
	ContractCSR(ctx context.Context, in *QueryContractCSRRequest, opts ...grpc.CallOption) (*QueryContractCSRResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CSRs(ctx context.Context, in *QueryCSRsRequest, opts ...grpc.CallOption) (*QueryCSRsResponse, error) {
	out := new(QueryCSRsResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/CSRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CSR(ctx context.Context, in *QueryCSRRequest, opts ...grpc.CallOption) (*QueryCSRResponse, error) {
	out := new(QueryCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/CSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeployerCSR(ctx context.Context, in *QueryDeployerCSRRequest, opts ...grpc.CallOption) (*QueryDeployerCSRResponse, error) {
	out := new(QueryDeployerCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/DeployerCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCSR(ctx context.Context, in *QueryContractCSRRequest, opts ...grpc.CallOption) (*QueryContractCSRResponse, error) {
	out := new(QueryContractCSRResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/ContractCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// query all registered CSRs
	CSRs(context.Context, *QueryCSRsRequest) (*QueryCSRsResponse, error)
	// query a specific CSR by the nftId
	CSR(context.Context, *QueryCSRRequest) (*QueryCSRResponse, error)
	// query a CSR by a specific deployer
	DeployerCSR(context.Context, *QueryDeployerCSRRequest) (*QueryDeployerCSRResponse, error)
	// query a csr by the smart contract
	ContractCSR(context.Context, *QueryContractCSRRequest) (*QueryContractCSRResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CSRs(ctx context.Context, req *QueryCSRsRequest) (*QueryCSRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CSRs not implemented")
}
func (*UnimplementedQueryServer) CSR(ctx context.Context, req *QueryCSRRequest) (*QueryCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CSR not implemented")
}
func (*UnimplementedQueryServer) DeployerCSR(ctx context.Context, req *QueryDeployerCSRRequest) (*QueryDeployerCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployerCSR not implemented")
}
func (*UnimplementedQueryServer) ContractCSR(ctx context.Context, req *QueryContractCSRRequest) (*QueryContractCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCSR not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CSRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCSRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CSRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/CSRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CSRs(ctx, req.(*QueryCSRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/CSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CSR(ctx, req.(*QueryCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeployerCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeployerCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeployerCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/DeployerCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeployerCSR(ctx, req.(*QueryDeployerCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/ContractCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCSR(ctx, req.(*QueryContractCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.csr.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CSRs",
			Handler:    _Query_CSRs_Handler,
		},
		{
			MethodName: "CSR",
			Handler:    _Query_CSR_Handler,
		},
		{
			MethodName: "DeployerCSR",
			Handler:    _Query_DeployerCSR_Handler,
		},
		{
			MethodName: "ContractCSR",
			Handler:    _Query_ContractCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/csr/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCSRsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCSRsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Csrs) > 0 {
		for iNdEx := len(m.Csrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Csrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Csr.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeployerCSRRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeployerCSRRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeployerCSRRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeployerCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeployerCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeployerCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Csrs) > 0 {
		for iNdEx := len(m.Csrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Csrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCSRRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCSRRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCSRRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCSRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCSRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCSRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Csr.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCSRsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCSRsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Csrs) > 0 {
		for _, e := range m.Csrs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCSRRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftId != 0 {
		n += 1 + sovQuery(uint64(m.NftId))
	}
	return n
}

func (m *QueryCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Csr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDeployerCSRRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeployerCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Csrs) > 0 {
		for _, e := range m.Csrs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractCSRRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractCSRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Csr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Csrs = append(m.Csrs, CSR{})
			if err := m.Csrs[len(m.Csrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeployerCSRRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeployerCSRRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeployerCSRRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeployerCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeployerCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeployerCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Csrs = append(m.Csrs, CSR{})
			if err := m.Csrs[len(m.Csrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCSRRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCSRRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCSRRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCSRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCSRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCSRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
