// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/csr/v1/csr.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The CSR struct is a wrapper to all of the metadata associated with a given Contract Secured Revenue registration. It maintains the pool
// where all of the fees are being sent to, the deployer that is responsible for all deployments, and the set of dApps (smart contracts)
// that are registered with this pool.
type CSR struct {
	// The Deployer keeps track of the user that deployed all of the dApps as well as this CSR pool.
	Deployer string `protobuf:"bytes,1,opt,name=deployer,proto3" json:"deployer,omitempty"`
	// Contracts is the list of all EVM address that are registered to this pool.
	Contracts []string `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty"`
	// The CSRPool keeps track of data on the pool itself include NFTs involved, accumulated rewards, and more (see below).
	CsrPool *CSRPool `protobuf:"bytes,3,opt,name=csr_pool,json=csrPool,proto3" json:"csr_pool,omitempty"`
}

func (m *CSR) Reset()         { *m = CSR{} }
func (m *CSR) String() string { return proto.CompactTextString(m) }
func (*CSR) ProtoMessage()    {}
func (*CSR) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c53cea3d443afa, []int{0}
}
func (m *CSR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSR.Merge(m, src)
}
func (m *CSR) XXX_Size() int {
	return m.Size()
}
func (m *CSR) XXX_DiscardUnknown() {
	xxx_messageInfo_CSR.DiscardUnknown(m)
}

var xxx_messageInfo_CSR proto.InternalMessageInfo

func (m *CSR) GetDeployer() string {
	if m != nil {
		return m.Deployer
	}
	return ""
}

func (m *CSR) GetContracts() []string {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *CSR) GetCsrPool() *CSRPool {
	if m != nil {
		return m.CsrPool
	}
	return nil
}

// The CSRPool is the data structure that wraps around the sdk account address for which all txFees from the
// CSR will be sent. The pool is controlled by the CSR module account, and withdrawal methods automatically
// take into account shares owned by an NFT identifier.
type CSRPool struct {
	// The mapping of NFT identifiers to their last withdrawal period (the period is a running total of the number of times txFees have been accrued)
	CsrNfts map[string]*CSRNFT `protobuf:"bytes,1,rep,name=csr_nfts,json=csrNfts,proto3" json:"csr_nfts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The number of unique NFTs minted for this CSR
	NftSupply uint64 `protobuf:"varint,2,opt,name=nft_supply,json=nftSupply,proto3" json:"nft_supply,omitempty"`
	// The address of the sdk account for which accumulated fees are gathered
	PoolAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=pool_address,json=poolAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"pool_address"`
	// The address of the NFT Factory for this CSR
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *CSRPool) Reset()         { *m = CSRPool{} }
func (m *CSRPool) String() string { return proto.CompactTextString(m) }
func (*CSRPool) ProtoMessage()    {}
func (*CSRPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c53cea3d443afa, []int{1}
}
func (m *CSRPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSRPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSRPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSRPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSRPool.Merge(m, src)
}
func (m *CSRPool) XXX_Size() int {
	return m.Size()
}
func (m *CSRPool) XXX_DiscardUnknown() {
	xxx_messageInfo_CSRPool.DiscardUnknown(m)
}

var xxx_messageInfo_CSRPool proto.InternalMessageInfo

func (m *CSRPool) GetCsrNfts() map[string]*CSRNFT {
	if m != nil {
		return m.CsrNfts
	}
	return nil
}

func (m *CSRPool) GetNftSupply() uint64 {
	if m != nil {
		return m.NftSupply
	}
	return 0
}

func (m *CSRPool) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// This is a wrapper around the EVM NFT that is used for verification in withdrawal of rewards
type CSRNFT struct {
	// the period at which the last withdrawal for this NFT occurred
	Period uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	// the NFT Identifier for this NFT
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// the smart contract address that minted this nft
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CSRNFT) Reset()         { *m = CSRNFT{} }
func (m *CSRNFT) String() string { return proto.CompactTextString(m) }
func (*CSRNFT) ProtoMessage()    {}
func (*CSRNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c53cea3d443afa, []int{2}
}
func (m *CSRNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSRNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSRNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSRNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSRNFT.Merge(m, src)
}
func (m *CSRNFT) XXX_Size() int {
	return m.Size()
}
func (m *CSRNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_CSRNFT.DiscardUnknown(m)
}

var xxx_messageInfo_CSRNFT proto.InternalMessageInfo

func (m *CSRNFT) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *CSRNFT) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CSRNFT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*CSR)(nil), "canto.csr.v1.CSR")
	proto.RegisterType((*CSRPool)(nil), "canto.csr.v1.CSRPool")
	proto.RegisterMapType((map[string]*CSRNFT)(nil), "canto.csr.v1.CSRPool.CsrNftsEntry")
	proto.RegisterType((*CSRNFT)(nil), "canto.csr.v1.CSRNFT")
}

func init() { proto.RegisterFile("canto/csr/v1/csr.proto", fileDescriptor_57c53cea3d443afa) }

var fileDescriptor_57c53cea3d443afa = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x99, 0x82, 0xb0, 0x7d, 0x21, 0xba, 0x99, 0xac, 0x9b, 0x4a, 0xb4, 0x34, 0x9c, 0xaa,
	0x09, 0xad, 0x8b, 0x31, 0x31, 0x9b, 0x78, 0xd8, 0x25, 0xea, 0x8d, 0x90, 0xc1, 0x83, 0xf1, 0x42,
	0xd8, 0x69, 0x41, 0x42, 0xb7, 0xd3, 0xcc, 0x0c, 0xac, 0xfd, 0x16, 0x7e, 0x04, 0x3f, 0x8c, 0x87,
	0x3d, 0xee, 0xd1, 0x78, 0xd8, 0x18, 0xb8, 0xf8, 0x31, 0xcc, 0xfc, 0x61, 0xc5, 0xe8, 0x69, 0xe6,
	0x79, 0x9f, 0xb7, 0x4f, 0x9e, 0xfe, 0x32, 0x70, 0x4c, 0xa7, 0xb9, 0x64, 0x31, 0x15, 0x3c, 0x5e,
	0x9f, 0xa8, 0x23, 0x2a, 0x38, 0x93, 0x0c, 0xb7, 0xf4, 0x3c, 0x52, 0x83, 0xf5, 0x49, 0xfb, 0x68,
	0xce, 0xe6, 0x4c, 0x1b, 0xb1, 0xba, 0x99, 0x9d, 0xf6, 0x23, 0xca, 0xc4, 0x25, 0x13, 0x13, 0x63,
	0x18, 0x61, 0xac, 0xee, 0x15, 0x54, 0x07, 0x63, 0x82, 0xdb, 0x70, 0x90, 0xa4, 0x45, 0xc6, 0xca,
	0x94, 0x7b, 0x28, 0x40, 0xa1, 0x4b, 0xee, 0x34, 0x7e, 0x0c, 0x2e, 0x65, 0xb9, 0xe4, 0x53, 0x2a,
	0x85, 0xe7, 0x04, 0xd5, 0xd0, 0x25, 0x7f, 0x06, 0xf8, 0x39, 0x1c, 0x50, 0xc1, 0x27, 0x05, 0x63,
	0x99, 0x57, 0x0d, 0x50, 0xd8, 0xec, 0x3f, 0x8c, 0xf6, 0x2b, 0x45, 0x83, 0x31, 0x19, 0x31, 0x96,
	0x91, 0x06, 0x15, 0x5c, 0x5d, 0x4e, 0x6b, 0xbf, 0xbe, 0x76, 0x50, 0xf7, 0x9b, 0x03, 0x0d, 0x6b,
	0xe1, 0xd7, 0x26, 0x23, 0x9f, 0x49, 0xe1, 0xa1, 0xa0, 0x1a, 0x36, 0xfb, 0xdd, 0xff, 0x66, 0x44,
	0x03, 0xc1, 0x87, 0x33, 0x29, 0xde, 0xe4, 0x92, 0x97, 0x3a, 0x50, 0x29, 0xfc, 0x04, 0x20, 0x9f,
	0xc9, 0x89, 0x58, 0x15, 0x45, 0x56, 0x7a, 0x4e, 0x80, 0xc2, 0x1a, 0x71, 0xf3, 0x99, 0x1c, 0xeb,
	0x01, 0xfe, 0x00, 0x2d, 0xd5, 0x6e, 0x32, 0x4d, 0x12, 0x9e, 0x0a, 0xa1, 0x5b, 0xba, 0xe7, 0x2f,
	0xaf, 0x6f, 0x3b, 0x95, 0x1f, 0xb7, 0x9d, 0xde, 0x7c, 0x21, 0x3f, 0xad, 0x2e, 0x22, 0xca, 0x2e,
	0x2d, 0x19, 0x7b, 0xf4, 0x44, 0xb2, 0x8c, 0x65, 0x59, 0xa4, 0x22, 0x3a, 0xa3, 0xf4, 0xcc, 0x7c,
	0x4c, 0x9a, 0x2a, 0xca, 0x0a, 0xfc, 0x14, 0x0e, 0x77, 0x20, 0xee, 0xd2, 0x6b, 0x9a, 0xde, 0x83,
	0xdd, 0xdc, 0xae, 0xb6, 0x47, 0xd0, 0xda, 0x2f, 0x8f, 0x0f, 0xa1, 0xba, 0x4c, 0x4b, 0xcb, 0x5a,
	0x5d, 0xf1, 0x33, 0xb8, 0xb7, 0x9e, 0x66, 0xab, 0x54, 0xff, 0x40, 0xb3, 0x7f, 0xf4, 0x0f, 0x81,
	0xe1, 0xdb, 0xf7, 0xc4, 0xac, 0x9c, 0x3a, 0xaf, 0x90, 0xc5, 0x38, 0x82, 0xba, 0xb1, 0xf0, 0x31,
	0xd4, 0x8b, 0x94, 0x2f, 0x58, 0xa2, 0x43, 0x6b, 0xc4, 0x2a, 0x7c, 0x1f, 0x9c, 0x45, 0x62, 0xa9,
	0x38, 0x8b, 0x04, 0x7b, 0xd0, 0xf8, 0x8b, 0x04, 0xd9, 0x49, 0x93, 0x78, 0xfe, 0xee, 0x7a, 0xe3,
	0xa3, 0x9b, 0x8d, 0x8f, 0x7e, 0x6e, 0x7c, 0xf4, 0x65, 0xeb, 0x57, 0x6e, 0xb6, 0x7e, 0xe5, 0xfb,
	0xd6, 0xaf, 0x7c, 0xdc, 0x47, 0x35, 0x50, 0xe5, 0x7a, 0xc3, 0x54, 0x5e, 0x31, 0xbe, 0x34, 0x2a,
	0x5e, 0xf7, 0xe3, 0xcf, 0xfa, 0x81, 0x6a, 0x6a, 0x17, 0x75, 0xfd, 0xc2, 0x5e, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x19, 0x75, 0x14, 0xba, 0x02, 0x00, 0x00,
}

func (this *CSR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSR)
	if !ok {
		that2, ok := that.(CSR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Deployer != that1.Deployer {
		return false
	}
	if len(this.Contracts) != len(that1.Contracts) {
		return false
	}
	for i := range this.Contracts {
		if this.Contracts[i] != that1.Contracts[i] {
			return false
		}
	}
	if !this.CsrPool.Equal(that1.CsrPool) {
		return false
	}
	return true
}
func (this *CSRPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSRPool)
	if !ok {
		that2, ok := that.(CSRPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CsrNfts) != len(that1.CsrNfts) {
		return false
	}
	for i := range this.CsrNfts {
		if !this.CsrNfts[i].Equal(that1.CsrNfts[i]) {
			return false
		}
	}
	if this.NftSupply != that1.NftSupply {
		return false
	}
	if !this.PoolAddress.Equal(that1.PoolAddress) {
		return false
	}
	if this.ContractAddress != that1.ContractAddress {
		return false
	}
	return true
}
func (this *CSRNFT) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSRNFT)
	if !ok {
		that2, ok := that.(CSRNFT)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (m *CSR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CsrPool != nil {
		{
			size, err := m.CsrPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCsr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contracts[iNdEx])
			copy(dAtA[i:], m.Contracts[iNdEx])
			i = encodeVarintCsr(dAtA, i, uint64(len(m.Contracts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Deployer) > 0 {
		i -= len(m.Deployer)
		copy(dAtA[i:], m.Deployer)
		i = encodeVarintCsr(dAtA, i, uint64(len(m.Deployer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSRPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSRPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSRPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintCsr(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PoolAddress.Size()
		i -= size
		if _, err := m.PoolAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCsr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.NftSupply != 0 {
		i = encodeVarintCsr(dAtA, i, uint64(m.NftSupply))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CsrNfts) > 0 {
		for k := range m.CsrNfts {
			v := m.CsrNfts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCsr(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCsr(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCsr(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CSRNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSRNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSRNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCsr(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintCsr(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Period != 0 {
		i = encodeVarintCsr(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCsr(dAtA []byte, offset int, v uint64) int {
	offset -= sovCsr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CSR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployer)
	if l > 0 {
		n += 1 + l + sovCsr(uint64(l))
	}
	if len(m.Contracts) > 0 {
		for _, s := range m.Contracts {
			l = len(s)
			n += 1 + l + sovCsr(uint64(l))
		}
	}
	if m.CsrPool != nil {
		l = m.CsrPool.Size()
		n += 1 + l + sovCsr(uint64(l))
	}
	return n
}

func (m *CSRPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CsrNfts) > 0 {
		for k, v := range m.CsrNfts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCsr(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCsr(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCsr(uint64(mapEntrySize))
		}
	}
	if m.NftSupply != 0 {
		n += 1 + sovCsr(uint64(m.NftSupply))
	}
	l = m.PoolAddress.Size()
	n += 1 + l + sovCsr(uint64(l))
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovCsr(uint64(l))
	}
	return n
}

func (m *CSRNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovCsr(uint64(m.Period))
	}
	if m.Id != 0 {
		n += 1 + sovCsr(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCsr(uint64(l))
	}
	return n
}

func sovCsr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCsr(x uint64) (n int) {
	return sovCsr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CSR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCsr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrPool == nil {
				m.CsrPool = &CSRPool{}
			}
			if err := m.CsrPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCsr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCsr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSRPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCsr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSRPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSRPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrNfts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrNfts == nil {
				m.CsrNfts = make(map[string]*CSRNFT)
			}
			var mapkey string
			var mapvalue *CSRNFT
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCsr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCsr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCsr
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCsr
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCsr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCsr
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCsr
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CSRNFT{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCsr(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCsr
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CsrNfts[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSupply", wireType)
			}
			m.NftSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCsr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCsr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSRNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCsr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSRNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSRNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCsr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCsr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCsr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCsr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCsr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCsr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCsr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCsr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCsr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCsr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCsr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCsr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCsr = fmt.Errorf("proto: unexpected end of group")
)
