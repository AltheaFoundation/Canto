package keeper_test

import (
	_ "embed" // embed compiled smart contract
	"encoding/json"
	"fmt"
	"math"
	"math/big"

	"github.com/Canto-Network/Canto/v2/app"
	"github.com/Canto-Network/Canto/v2/testutil"
	"github.com/Canto-Network/Canto/v2/x/csr/types"
	"github.com/ethereum/go-ethereum/common"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/evmos/ethermint/crypto/ethsecp256k1"
	"github.com/evmos/ethermint/encoding"
	"github.com/evmos/ethermint/tests"

	evmtypes "github.com/evmos/ethermint/x/evm/types"

	sdk "github.com/cosmos/cosmos-sdk/types"
	. "github.com/onsi/ginkgo/v2"
	abci "github.com/tendermint/tendermint/abci/types"
)

var contractCode = "608060405234801561001057600080fd5b507f5202c943f7605429e15ba3fff7a2230f7bd9f3bcdf60a56ec9fe0f156c8d538f3360405161004091906100eb565b60405180910390a1610119565b600082825260208201905092915050565b7f636f6e7472616374206372656174656400000000000000000000000000000000600082015250565b600061009460108361004d565b915061009f8261005e565b602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d5826100aa565b9050919050565b6100e5816100ca565b82525050565b6000604082019050818103600083015261010481610087565b905061011360208301846100dc565b92915050565b6101aa806101286000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634420e48614610030575b600080fd5b61004a6004803603810190610045919061011d565b61004c565b005b8073ffffffffffffffffffffffffffffffffffffffff16634420e486336040518263ffffffff1660e01b81526004016100859190610159565b600060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081359050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610153816100df565b82525050565b600060208201905061016e600083018461014a565b9291505056fea2646970667358221220b3c1cacb34245e8e4324fabd7aa8cd877a9c7794fc0e88d5cabb51703cbca5b464736f6c63430008100033"

var turnstileCode = "608060405234801561001057600080fd5b50610d4d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806336ad334a1461005c5780634420e4861461007857806367811e8a14610094578063f0dce421146100b0578063f5165863146100cc575b600080fd5b610076600480360381019061007191906106f2565b6100e8565b005b610092600480360381019061008d91906107c1565b61012e565b005b6100ae60048036038101906100a991906107ee565b61016a565b005b6100ca60048036038101906100c5919061084a565b61016e565b005b6100e660048036038101906100e19190610893565b610171565b005b7f34d70c56eb3dd8895dd0a61b86ea5ea99b0c34d6d705326faf3455dc5fb13845858585858560405161011f959493929190610c5d565b60405180910390a15050505050565b7ff2c969f69d555f2a0bc96fe8658e934471f3336a75004e470dfbc1e4c33c5724338260405161015f929190610cc5565b60405180910390a150565b5050565b50565b7f4bbeb615a2e84957c78f3e83cc3089e80cfd4a8ab8d8ccd811ad2cf407e5c80533826040516101a2929190610cee565b60405180910390a150565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61020f826101c6565b810181811067ffffffffffffffff8211171561022e5761022d6101d7565b5b80604052505050565b60006102416101ad565b905061024d8282610206565b919050565b600067ffffffffffffffff82111561026d5761026c6101d7565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ae82610283565b9050919050565b6102be816102a3565b81146102c957600080fd5b50565b6000813590506102db816102b5565b92915050565b60006102f46102ef84610252565b610237565b905080838252602082019050602084028301858111156103175761031661027e565b5b835b81811015610340578061032c88826102cc565b845260208401935050602081019050610319565b5050509392505050565b600082601f83011261035f5761035e6101c1565b5b813561036f8482602086016102e1565b91505092915050565b600067ffffffffffffffff821115610393576103926101d7565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156103bf576103be6101d7565b5b602082029050602081019050919050565b600067ffffffffffffffff82169050919050565b6103ed816103d0565b81146103f857600080fd5b50565b60008135905061040a816103e4565b92915050565b600061042361041e846103a4565b610237565b905080838252602082019050602084028301858111156104465761044561027e565b5b835b8181101561046f578061045b88826103fb565b845260208401935050602081019050610448565b5050509392505050565b600082601f83011261048e5761048d6101c1565b5b813561049e848260208601610410565b91505092915050565b60006104ba6104b584610378565b610237565b905080838252602082019050602084028301858111156104dd576104dc61027e565b5b835b8181101561052457803567ffffffffffffffff811115610502576105016101c1565b5b80860161050f8982610479565b855260208501945050506020810190506104df565b5050509392505050565b600082601f830112610543576105426101c1565b5b81356105538482602086016104a7565b91505092915050565b600067ffffffffffffffff821115610577576105766101d7565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156105a8576105a76101d7565b5b6105b1826101c6565b9050602081019050919050565b82818337600083830152505050565b60006105e06105db8461058d565b610237565b9050828152602081018484840111156105fc576105fb610588565b5b6106078482856105be565b509392505050565b600082601f830112610624576106236101c1565b5b81356106348482602086016105cd565b91505092915050565b600061065061064b8461055c565b610237565b905080838252602082019050602084028301858111156106735761067261027e565b5b835b818110156106ba57803567ffffffffffffffff811115610698576106976101c1565b5b8086016106a5898261060f565b85526020850194505050602081019050610675565b5050509392505050565b600082601f8301126106d9576106d86101c1565b5b81356106e984826020860161063d565b91505092915050565b600080600080600060a0868803121561070e5761070d6101b7565b5b600086013567ffffffffffffffff81111561072c5761072b6101bc565b5b6107388882890161034a565b9550506020610749888289016102cc565b945050604086013567ffffffffffffffff81111561076a576107696101bc565b5b6107768882890161052e565b935050606086013567ffffffffffffffff811115610797576107966101bc565b5b6107a3888289016106c4565b92505060806107b4888289016103fb565b9150509295509295909350565b6000602082840312156107d7576107d66101b7565b5b60006107e5848285016102cc565b91505092915050565b60008060408385031215610805576108046101b7565b5b600083013567ffffffffffffffff811115610823576108226101bc565b5b61082f858286016106c4565b9250506020610840858286016103fb565b9150509250929050565b6000602082840312156108605761085f6101b7565b5b600082013567ffffffffffffffff81111561087e5761087d6101bc565b5b61088a848285016106c4565b91505092915050565b6000602082840312156108a9576108a86101b7565b5b60006108b7848285016103fb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6108f5816102a3565b82525050565b600061090783836108ec565b60208301905092915050565b6000602082019050919050565b600061092b826108c0565b61093581856108cb565b9350610940836108dc565b8060005b8381101561097157815161095888826108fb565b975061096383610913565b925050600181019050610944565b5085935050505092915050565b610987816102a3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109ee816103d0565b82525050565b6000610a0083836109e5565b60208301905092915050565b6000602082019050919050565b6000610a24826109b9565b610a2e81856109c4565b9350610a39836109d5565b8060005b83811015610a6a578151610a5188826109f4565b9750610a5c83610a0c565b925050600181019050610a3d565b5085935050505092915050565b6000610a838383610a19565b905092915050565b6000602082019050919050565b6000610aa38261098d565b610aad8185610998565b935083602082028501610abf856109a9565b8060005b85811015610afb5784840389528151610adc8582610a77565b9450610ae783610a8b565b925060208a01995050600181019050610ac3565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b73578082015181840152602081019050610b58565b60008484015250505050565b6000610b8a82610b39565b610b948185610b44565b9350610ba4818560208601610b55565b610bad816101c6565b840191505092915050565b6000610bc48383610b7f565b905092915050565b6000602082019050919050565b6000610be482610b0d565b610bee8185610b18565b935083602082028501610c0085610b29565b8060005b85811015610c3c5784840389528151610c1d8582610bb8565b9450610c2883610bcc565b925060208a01995050600181019050610c04565b50829750879550505050505092915050565b610c57816103d0565b82525050565b600060a0820190508181036000830152610c778188610920565b9050610c86602083018761097e565b8181036040830152610c988186610a98565b90508181036060830152610cac8185610bd9565b9050610cbb6080830184610c4e565b9695505050505050565b6000604082019050610cda600083018561097e565b610ce7602083018461097e565b9392505050565b6000604082019050610d03600083018561097e565b610d106020830184610c4e565b939250505056fea264697066735822122017593394da1111ecb84b0df850005e00d695b8d89a238b0410126c3463bd29b164736f6c63430008100033"

//go:embed test_contracts/compiled_contracts/csrTest.json
var csrTestContractJson []byte // nolint: golint

var _ = Describe("CSR Distribution : ", Ordered, func() {
	// feeCollectorAddress := s.app.AccountKeeper.GetModuleAddress(authtypes.FeeCollectorName)
	denom := s.denom

	// account initial balances
	initAmount := sdk.NewInt(int64(math.Pow10(18) * 4))
	initBalance := sdk.NewCoins(sdk.NewCoin(denom, initAmount))

	var (
		deployerKey      *ethsecp256k1.PrivKey
		userKey          *ethsecp256k1.PrivKey
		deployerAddress  sdk.AccAddress
		userAddress      sdk.AccAddress
		params           types.Params
		turnstileAddress common.Address
	)

	BeforeAll(func() {
		s.SetupTest()

		params = s.app.CSRKeeper.GetParams(s.ctx)
		params.EnableCsr = true
		s.app.CSRKeeper.SetParams(s.ctx, params)
		s.Commit()

		// setup deployer account
		deployerKey, deployerAddress = generateKey()
		testutil.FundAccount(s.app.BankKeeper, s.ctx, deployerAddress, initBalance)

		// setup account interacting with registered contracts
		userKey, userAddress = generateKey()
		testutil.FundAccount(s.app.BankKeeper, s.ctx, userAddress, initBalance)
		acc := s.app.AccountKeeper.NewAccountWithAddress(s.ctx, userAddress)
		s.app.AccountKeeper.SetAccount(s.ctx, acc)
		s.Commit()

		// deploy the turnstile
		turnstileAddress = deployContract(deployerKey, turnstileCode)
		s.Commit()

	})

	Context("testing init", func() {
		It("It should exist", func() {
			fmt.Println("This is the address of the turnstile smart contract: ", turnstileAddress)
			contractAddress := deployContract(deployerKey, contractCode)
			fmt.Println("This is the address of the test smart contract: ", contractAddress)

			// Register event embedded in an test smart contract
			var csrContract evmtypes.CompiledContract
			json.Unmarshal(csrTestContractJson, &csrContract)
			data, _ := csrContract.ABI.Pack("register", turnstileAddress)
			gasPrice := big.NewInt(1000000000)

			contractInteract(userKey, &contractAddress, gasPrice, nil, nil, data, nil)
			s.Commit()
		})
	})

})

func generateKey() (*ethsecp256k1.PrivKey, sdk.AccAddress) {
	address, priv := tests.NewAddrKey()
	return priv.(*ethsecp256k1.PrivKey), sdk.AccAddress(address.Bytes())
}

func deployContract(priv *ethsecp256k1.PrivKey, contractCode string) common.Address {
	from := common.BytesToAddress(priv.PubKey().Address().Bytes())
	data := common.Hex2Bytes(contractCode)
	nonce := getNonce(from.Bytes())

	s.app.Erc20Keeper.CallEVMWithData(s.ctx, from, nil, data, true)

	contractAddress := crypto.CreateAddress(from, nonce)
	acc := s.app.EvmKeeper.GetAccountWithoutBalance(s.ctx, contractAddress)

	s.Require().NotEmpty(acc)
	s.Require().True(acc.IsContract())
	return contractAddress
}

func getNonce(addressBytes []byte) uint64 {
	return s.app.EvmKeeper.GetNonce(
		s.ctx,
		common.BytesToAddress(addressBytes),
	)
}

func contractInteract(
	priv *ethsecp256k1.PrivKey,
	contractAddr *common.Address,
	gasPrice *big.Int,
	gasFeeCap *big.Int,
	gasTipCap *big.Int,
	data []byte,
	accesses *ethtypes.AccessList,
) abci.ResponseDeliverTx {
	msgEthereumTx := buildEthTx(priv, contractAddr, gasPrice, gasFeeCap, gasTipCap, data, accesses)
	res := deliverEthTx(priv, msgEthereumTx)
	return res
}

func buildEthTx(
	priv *ethsecp256k1.PrivKey,
	to *common.Address,
	gasPrice *big.Int,
	gasFeeCap *big.Int,
	gasTipCap *big.Int,
	data []byte,
	accesses *ethtypes.AccessList,
) *evmtypes.MsgEthereumTx {
	chainID := s.app.EvmKeeper.ChainID()
	from := common.BytesToAddress(priv.PubKey().Address().Bytes())
	nonce := getNonce(from.Bytes())
	gasLimit := uint64(100000)
	msgEthereumTx := evmtypes.NewTx(
		chainID,
		nonce,
		to,
		nil,
		gasLimit,
		gasPrice,
		gasFeeCap,
		gasTipCap,
		data,
		accesses,
	)
	msgEthereumTx.From = from.String()
	return msgEthereumTx
}

func deliverEthTx(priv *ethsecp256k1.PrivKey, msgEthereumTx *evmtypes.MsgEthereumTx) abci.ResponseDeliverTx {
	bz := prepareEthTx(priv, msgEthereumTx)
	req := abci.RequestDeliverTx{Tx: bz}
	res := s.app.BaseApp.DeliverTx(req)
	return res
}

func prepareEthTx(priv *ethsecp256k1.PrivKey, msgEthereumTx *evmtypes.MsgEthereumTx) []byte {
	// Sign transaction
	err := msgEthereumTx.Sign(s.ethSigner, tests.NewSigner(priv))
	s.Require().NoError(err)

	// Assemble transaction from fields
	encodingConfig := encoding.MakeConfig(app.ModuleBasics)
	txBuilder := encodingConfig.TxConfig.NewTxBuilder()
	tx, err := msgEthereumTx.BuildTx(txBuilder, s.app.EvmKeeper.GetParams(s.ctx).EvmDenom)
	s.Require().NoError(err)

	// Encode transaction by default Tx encoder and broadcasted over the network
	txEncoder := encodingConfig.TxConfig.TxEncoder()
	bz, err := txEncoder(tx)
	s.Require().NoError(err)

	return bz
}
